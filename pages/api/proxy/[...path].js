/*********************************************************************
 * Anime API Proxy - –ü–æ–ª–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è API –∞–Ω–∏–º–µ
 * URL: https://api.cdnlibs.org/api
 * 
 * –§—É–Ω–∫—Ü–∏–∏:
 * - –ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ API –∞–Ω–∏–º–µ
 * - –ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–±—Ö–æ–¥–æ–º CORS
 * - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ (5 –º–∏–Ω—É—Ç)
 * - Rate limiting (100 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É)
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ fallback'—ã
 * - CORS –ø–æ–¥–¥–µ—Ä–∂–∫–∞
 *********************************************************************/

import axios from 'axios';
import { processApiResponse } from '../../../lib/imageProxyHelper';

// ==================== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ====================

// –ë–∞–∑–æ–≤—ã–µ URL –¥–ª—è API –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const ORIGINAL_API_BASE = 'https://api.cdnlibs.org/api';
const IMAGE_BASE = 'https://cover.imglib.info';

// –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ HTTP –º–µ—Ç–æ–¥—ã
const ALLOWED_METHODS = new Set(['GET', 'OPTIONS']);

// –ó–∞–≥–æ–ª–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏
const IGNORED_HEADERS = new Set([
  'host',
  'connection', 
  'accept-encoding',
  'content-length',
  'origin',
  'referer',
]);

// –ö—ç—à –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ø–∞–º—è—Ç–∏)
const cache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// Rate limiting - –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
const requestCounts = new Map();
const MAX_REQUESTS_PER_MINUTE = 100;

// ==================== –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ====================

export default async function handler(req, res) {
  const { path } = req.query;
  const { method, query, headers } = req;
  
  // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã image URL
  const host = req.headers.host || 'localhost:3000';
  const protocol = req.headers['x-forwarded-proto'] || 'http';
  const proxyBase = `${protocol}://${host}`;

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –º–µ—Ç–æ–¥–∞
  if (!ALLOWED_METHODS.has(method)) {
    return res.status(405).json({ 
      error: 'Method not allowed', 
      allowed: Array.from(ALLOWED_METHODS) 
    });
  }

  // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, Range');
  res.setHeader('Access-Control-Max-Age', '86400'); // 24 —á–∞—Å–∞

  // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OPTIONS –∑–∞–ø—Ä–æ—Å—ã (–¥–ª—è CORS preflight)
  if (method === 'OPTIONS') {
    return res.status(200).end();
  }

  // 4. Rate limiting - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
  const clientIP = req.headers['x-forwarded-for'] || req.socket.remoteAddress || 'unknown';
  const now = Date.now();
  
  if (!requestCounts.has(clientIP)) {
    requestCounts.set(clientIP, []);
  }
  
  const requests = requestCounts.get(clientIP);
  const recentRequests = requests.filter(time => now - time < 60000);
  
  if (recentRequests.length >= MAX_REQUESTS_PER_MINUTE) {
    return res.status(429).json({ 
      error: 'Too many requests',
      limit: MAX_REQUESTS_PER_MINUTE,
      window: '1 minute'
    });
  }
  recentRequests.push(now);
  requestCounts.set(clientIP, recentRequests);

  try {
    // 5. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    const originalPath = Array.isArray(path) ? path.join('/') : path;
    
    // 6. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–∏ - –∑–∞—â–∏—Ç–∞ –æ—Ç SSRF –∞—Ç–∞–∫
    if (originalPath.includes('..') || originalPath.includes('//')) {
      return res.status(400).json({ error: 'Invalid path' });
    }

    // 7. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
    let targetUrl;
    let isImageRequest = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (originalPath.includes('uploads/') && 
        (originalPath.endsWith('.jpg') || 
         originalPath.endsWith('.png') || 
         originalPath.endsWith('.webp') ||
         originalPath.endsWith('.gif'))) {
      
      // –ó–∞–ø—Ä–æ—Å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
      targetUrl = `${IMAGE_BASE}/${originalPath}`;
      isImageRequest = true;
    } else {
      // –ó–∞–ø—Ä–æ—Å –∫ API
      targetUrl = `${ORIGINAL_API_BASE}/${originalPath}`;
    }
    
    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = `${method}:${targetUrl}:${JSON.stringify(query)}`;
    const cached = cache.get(cacheKey);
    
    if (cached && (now - cached.timestamp < CACHE_TTL)) {
      if (isImageRequest) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
        res.setHeader('Content-Type', cached.contentType);
        res.setHeader('Cache-Control', 'public, max-age=300');
        res.setHeader('X-Cache', 'HIT');
        return res.status(200).send(cached.data);
      } else {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º API –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (—Å –∑–∞–º–µ–Ω–æ–π image URL)
        const processedData = processApiResponse(cached.data, proxyBase);
        res.setHeader('X-Cache', 'HIT');
        return res.status(200).json(processedData);
      }
    }

    console.log(`üîÑ [${clientIP}] Proxying ${method} ${targetUrl}`);

    // 9. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è
    const filteredHeaders = {};
    for (const [key, value] of Object.entries(headers)) {
      if (!IGNORED_HEADERS.has(key.toLowerCase())) {
        filteredHeaders[key] = value;
      }
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø–æ–º–æ–≥–∞—é—Ç –æ–±–æ–π—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É)
    if (isImageRequest) {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
      filteredHeaders['User-Agent'] = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36';
      filteredHeaders['Accept'] = 'image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8';
      filteredHeaders['Accept-Language'] = 'en-US,en;q=0.9,ru;q=0.8';
      filteredHeaders['Accept-Encoding'] = 'gzip, deflate, br';
      filteredHeaders['Cache-Control'] = 'no-cache';
      filteredHeaders['Pragma'] = 'no-cache';
      filteredHeaders['Referer'] = 'https://animelib-api.vercel.app/';
      filteredHeaders['Sec-Fetch-Dest'] = 'image';
      filteredHeaders['Sec-Fetch-Mode'] = 'no-cors';
      filteredHeaders['Sec-Fetch-Site'] = 'cross-site';
    } else {
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
      filteredHeaders['User-Agent'] = 'AnimeSearchProxy/1.0 (Personal Use)';
    }
    
    // 10. –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
    const originalResponse = await axios({
      method: method,
      url: targetUrl,
      params: isImageRequest ? {} : query, // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      headers: filteredHeaders,
      responseType: 'arraybuffer', // –ü–æ–ª—É—á–∞–µ–º –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      timeout: 15000, // 15 —Å–µ–∫—É–Ω–¥ timeout
      validateStatus: (status) => status < 500, // –ù–µ –±—Ä–æ—Å–∞—Ç—å –æ—à–∏–±–∫–∏ –¥–ª—è 4xx
    });

    // 11. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    if (isImageRequest) {
      const contentType = originalResponse.headers['content-type'] || 'image/jpeg';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (contentType.includes('text/html') || contentType.includes('application/json')) {
        const text = Buffer.from(originalResponse.data).toString('utf-8');
        
        // –°–µ—Ä–≤–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (403 Forbidden)
        if (text.includes('<html>') || text.includes('403') || text.includes('forbidden')) {
          console.warn(`üö´ Image blocked by server: ${targetUrl}`);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º SVG placeholder
          const placeholderSvg = `
            <svg width="300" height="200" xmlns="http://www.w3.org/2000/svg">
              <defs>
                <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
                  <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
                  <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
                </linearGradient>
              </defs>
              <rect width="100%" height="100%" fill="url(#grad)" rx="8"/>
              <text x="50%" y="40%" font-family="Arial" font-size="24" fill="white" text-anchor="middle" dy=".3em">üéå</text>
              <text x="50%" y="60%" font-family="Arial" font-size="14" fill="white" text-anchor="middle" dy=".3em">Anime Cover</text>
            </svg>
          `;
          const placeholderBuffer = Buffer.from(placeholderSvg, 'utf-8');
          
          res.setHeader('Content-Type', 'image/svg+xml');
          res.setHeader('Content-Length', placeholderBuffer.length);
          res.setHeader('X-Cache', 'MISS');
          res.setHeader('X-Placeholder', 'true');
          return res.status(200).end(placeholderBuffer);
        }
      }
      
      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
      const buffer = Buffer.from(originalResponse.data);
      res.setHeader('Content-Type', contentType);
      res.setHeader('Content-Length', buffer.length);
      res.setHeader('Cache-Control', 'public, max-age=3600'); // 1 —á–∞—Å –∫—ç—à
      res.setHeader('X-Cache', 'MISS');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      cache.set(cacheKey, {
        timestamp: now,
        data: buffer,
        contentType: contentType
      });
      
      res.status(200).end(buffer);
      
    } else {
      // API –∑–∞–ø—Ä–æ—Å - –ø–∞—Ä—Å–∏–º JSON
      const jsonData = JSON.parse(Buffer.from(originalResponse.data).toString('utf-8'));
      
      // –ó–∞–º–µ–Ω—è–µ–º image URL –Ω–∞ –ø—Ä–æ–∫—Å–∏ URL
      const processedData = processApiResponse(jsonData, proxyBase);
      
      res.setHeader('X-Cache', 'MISS');
      res.status(originalResponse.status).json(processedData);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ API –∑–∞–ø—Ä–æ—Å—ã –≤ –∫—ç—à (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
      if (method === 'GET' && originalResponse.status === 200) {
        cache.set(cacheKey, {
          timestamp: now,
          data: jsonData
        });
      }
    }

  } catch (error) {
    console.error('‚ùå Proxy error:', error.message);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    if (error.response) {
      // –û—à–∏–±–∫–∞ –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
      if (error.response.status === 404) {
        return res.status(404).json({ 
          error: 'Resource not found', 
          url: targetUrl 
        });
      }
      res.status(error.response.status).json(error.response.data);
    } else if (error.code === 'ECONNABORTED') {
      // Timeout
      res.status(408).json({ error: 'Request timeout' });
    } else if (error.request) {
      // –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
      res.status(502).json({ error: 'Failed to reach original API' });
    } else {
      // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞
      res.status(500).json({ 
        error: 'Internal proxy error', 
        details: error.message 
      });
    }
  } finally {
    // 12. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ (—É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏)
    if (cache.size > 1000) {
      const cutoff = Date.now() - CACHE_TTL;
      for (const [key, value] of cache.entries()) {
        if (value.timestamp < cutoff) {
          cache.delete(key);
        }
      }
    }
  }
}

// ==================== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Next.js API ====================

export const config = {
  api: {
    responseLimit: false, // –ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
    bodyParser: {
      sizeLimit: '20mb', // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    },
  },
};